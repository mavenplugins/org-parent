<?xml version="1.0" encoding="UTF-8" standalone="no"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.mavenplugins</groupId>
  <artifactId>org-parent</artifactId>
  <version>12</version>
  <packaging>pom</packaging>

  <name>mavenplugins org parent</name>
  <description>The base parent for all open-source projects coming from mavenplugins.</description>
  <url>https://github.com/mavenplugins/org-parent/</url>
  <inceptionYear>2023</inceptionYear>

  <organization>
    <name>mavenplugins</name>
    <url>https://github.com/mavenplugins/</url>
  </organization>

  <scm>
    <connection>scm:git:https://github.com/mavenplugins/org-parent.git</connection>
    <url>https://github.com/mavenplugins/org-parent</url>
    <tag>v12</tag>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/mavenplugins/org-parent/issues</url>
  </issueManagement>

  <licenses>
    <license>
      <name>MIT License</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <distributionManagement>
    <snapshotRepository>
      <id>${organization.snapshotNexusRepoId}</id>
      <url>${organization.snapshotNexusURL}</url>
    </snapshotRepository>
    <repository>
      <id>${organization.releaseNexusRepoId}</id>
      <url>${organization.stagingNexusURL}</url>
    </repository>
  </distributionManagement>

  <!-- Add organization related snapshot repos, since releases will be looked up to Maven Central by default. -->
  <repositories>
    <repository>
      <id>${organization.snapshotNexusRepoId}</id>
      <name>${organization.nameHostingNexus} Snapshots</name>
      <url>${organization.snapshotNexusURL}</url>
      <layout>default</layout>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
        <checksumPolicy>fail</checksumPolicy>
      </snapshots>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>${organization.snapshotNexusRepoId}</id>
      <name>${organization.nameHostingNexus} Plugin Snapshots (plugins)</name>
      <url>${organization.snapshotNexusURL}</url>
      <layout>default</layout>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
        <checksumPolicy>fail</checksumPolicy>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <developers>
    <developer>
      <id>Developers</id>
      <url>https://github.com/mavenplugins/org-parent/graphs/contributors</url>
    </developer>
  </developers>

  <properties>
    <project.scm.id>github</project.scm.id>
    <!-- General Properties -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- Sonatype and OSSRH Nexus config -->
    <organization.nameHostingNexus>Sonatype Central Portal</organization.nameHostingNexus>
    <organization.baseNexusURL>https://central.sonatype.com</organization.baseNexusURL>
    <organization.snapshotNexusURL>${organization.baseNexusURL}/repository/maven-snapshots/</organization.snapshotNexusURL>
    <organization.stagingNexusURL>https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/</organization.stagingNexusURL>
    <organization.commonNexusRepoId>organization_nexus</organization.commonNexusRepoId>
    <organization.snapshotNexusRepoId>${organization.commonNexusRepoId}</organization.snapshotNexusRepoId>
    <organization.releaseNexusRepoId>${organization.commonNexusRepoId}</organization.releaseNexusRepoId>
    <organization.stagingServerId>${organization.releaseNexusRepoId}</organization.stagingServerId>
    <!-- Apache Maven Plugin versions -->
    <version.maven>3.3.9</version.maven>
    <maven.enforce.version.range>[${version.maven},)</maven.enforce.version.range>
    <version.maven-enforcer-plugin>3.4.1</version.maven-enforcer-plugin>
    <version.extra-enforcer-rules>1.9.0</version.extra-enforcer-rules>
    <version.maven-toolchains-plugin>3.1.0</version.maven-toolchains-plugin>
    <version.maven-gpg-plugin>3.1.0</version.maven-gpg-plugin>
    <version.maven-compiler-plugin>3.12.1</version.maven-compiler-plugin>
    <version.maven-javadoc-plugin>3.6.0</version.maven-javadoc-plugin>
    <version.maven-source-plugin>3.0.1</version.maven-source-plugin>
    <version.maven-help-plugin>3.4.0</version.maven-help-plugin>
    <version.build-helper-maven-plugin>3.4.0</version.build-helper-maven-plugin>
    <version.maven-antrun-plugin>3.1.0</version.maven-antrun-plugin>
    <version.maven-install-plugin>2.5.2</version.maven-install-plugin>
    <version.maven-deploy-plugin>2.8.2</version.maven-deploy-plugin>
    <version.maven-release-plugin>2.5.3</version.maven-release-plugin>
    <!-- Plugin dependency versions -->
    <version.antrun.ant>1.10.15</version.antrun.ant>
    <version.antrun.ant-contrib>1.0b3</version.antrun.ant-contrib>
    <!-- Sonatype Maven Central Publishing Plugin version -->
    <version.central-publishing-maven-plugin>0.8.0</version.central-publishing-maven-plugin>
    <!-- Unleash plugins related config -->
    <groupId.unleash.common>io.github.mavenplugins</groupId.unleash.common>
    <!-- Unleash Maven Plugin -->
    <groupId.unleash-maven-plugin>${groupId.unleash.common}</groupId.unleash-maven-plugin>
    <artifactId.unleash-maven-plugin>unleash-maven-plugin</artifactId.unleash-maven-plugin>
    <version.unleash-maven-plugin>3.3.0</version.unleash-maven-plugin>
    <!-- Unleash SCM Provider -->
    <groupId.unleash-scm-provider>${groupId.unleash.common}</groupId.unleash-scm-provider>
    <groupId.unleash-scm-provider-git>${groupId.unleash-scm-provider}</groupId.unleash-scm-provider-git>
    <artifactId.unleash-scm-provider-git>unleash-scm-provider-git</artifactId.unleash-scm-provider-git>
    <version.unleash-scm-provider-git>3.3.0</version.unleash-scm-provider-git>
    <groupId.unleash-scm-provider-svn>${groupId.unleash-scm-provider}</groupId.unleash-scm-provider-svn>
    <artifactId.unleash-scm-provider-svn>unleash-scm-provider-svn</artifactId.unleash-scm-provider-svn>
    <version.unleash-scm-provider-svn>3.0.2</version.unleash-scm-provider-svn>
    <!-- Unleash CDI Plugin Hooks -->
    <groupId.cdi-plugin-hooks>${groupId.unleash.common}</groupId.cdi-plugin-hooks>
    <artifactId.cdi-plugin-hooks>cdi-plugin-hooks</artifactId.cdi-plugin-hooks>
    <version.cdi-plugin-hooks>0.2.1</version.cdi-plugin-hooks>
    <!-- Plugin configuration properties -->
    <skip.attach-sources>false</skip.attach-sources>
    <!-- Note: Overwrite <phase.attach-javadocs> with none or empty value, if attached-javadocs must be skipped -->
    <phase.attach-javadocs>package</phase.attach-javadocs>
    <!-- Note: Override javadoc.doclint if required. This must be set for JAVADOC >= 8 only! -->
    <javadoc.doclint/>
    <skip.gpg.signing>true</skip.gpg.signing>
    <!-- Maven Toolchain -->
    <toolchain.executionEnablePhase>validate</toolchain.executionEnablePhase>
    <toolchain.executionDisablePhase>_NEVER_</toolchain.executionDisablePhase>
    <toolchain.executionPhase>${toolchain.executionDisablePhase}</toolchain.executionPhase>
    <!-- Note: toolchain.jdkVersion is empty by default. It is supposed to be either set by profile 'toolchain' below,
               by -D option via MAVEN_OPTS, on mvn commandline or by settings.xml -->
    <toolchain.jdkVersion/>
    <!-- Sonatype staging -->
    <!-- staging.autoPublish: should be set to false for testing on release version deployments. -->
    <staging.autoPublish>true</staging.autoPublish>
    <staging.dropPhaseNever>_NEVER_</staging.dropPhaseNever>
    <staging.dropPhaseDeploy>deploy</staging.dropPhaseDeploy>
    <!-- Note: staging.dropPhase: must be either ${staging.dropPhaseNever} or ${staging.dropPhaseDeploy} -->
    <!-- It should be overridden e.g. for testing on artifact release version deployments. -->
    <!-- <staging.dropPhase>${staging.dropPhaseNever}</staging.dropPhase> -->
    <staging.dropPhase>_NEVER_</staging.dropPhase>
    <staging.publishPhase>deploy</staging.publishPhase>
    <!-- Maximum amount of seconds to waitUntil a state has been reached. Cannot be less than 1800 seconds. -->
    <staging.progressTimeoutSeconds>1817</staging.progressTimeoutSeconds>
    <!-- Amount of seconds between intervals before checking if a state has been reached. Cannot be less then 5 seconds. -->
    <staging.progressPauseDurationSeconds>6</staging.progressPauseDurationSeconds>
    <!-- The plugin can wait until certain states have been reached.
         This can be useful if it's required to run a deployment async. The following states can be waited for:
         - published:
           Wait until the deployment is uploaded, validated and published.
           Failures from upload, validation or publishing will be in the console result output.

         - uploaded:
           Wait until the deployment bundle has been uploaded to the central URL.
           Only upload failures will be reported, any validation failures will have to be checked separately
           (i.e. on https://central.sonatype.com).

         - validated:
           Wait until the deployment bundle has been uploaded and validated.
           Failures from upload and validation will be in the console result output. -->
    <staging.waitUntilValidatedState>validated</staging.waitUntilValidatedState>
    <staging.waitUntilPublishedState>published</staging.waitUntilPublishedState>
    <staging.waitUntil>${staging.waitUntilPublishedState}</staging.waitUntil>
    <!-- Defaults for java compile version -->
    <version.java>1.8</version.java>
    <maven.compiler.source>${version.java}</maven.compiler.source>
    <maven.compiler.target>${version.java}</maven.compiler.target>
    <maven.compiler.showDeprecation>true</maven.compiler.showDeprecation>
    <maven.compiler.showWarnings>true</maven.compiler.showWarnings>
    <maven.compiler.meminitial/>
    <maven.compiler.maxmem/>
    <maven.compiler.compilerArgument/>
  </properties>

  <build>
    <pluginManagement>
      <plugins>
        <!-- Maven enforcer rules -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${version.maven-enforcer-plugin}</version>
          <executions>
            <execution>
              <id>enforce-maven-version</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requireMavenVersion>
                    <version>${maven.enforce.version.range}</version>
                  </requireMavenVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
          <dependencies>
            <dependency>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>extra-enforcer-rules</artifactId>
              <version>${version.extra-enforcer-rules}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-toolchains-plugin</artifactId>
          <version>${version.maven-toolchains-plugin}</version>
        </plugin>
        <plugin>
          <groupId>${groupId.unleash-maven-plugin}</groupId>
          <artifactId>${artifactId.unleash-maven-plugin}</artifactId>
          <version>${version.unleash-maven-plugin}</version>
          <dependencies>
            <dependency>
              <groupId>${groupId.unleash-scm-provider-git}</groupId>
              <artifactId>${artifactId.unleash-scm-provider-git}</artifactId>
              <version>${version.unleash-scm-provider-git}</version>
            </dependency>
            <dependency>
              <groupId>${groupId.cdi-plugin-hooks}</groupId>
              <artifactId>${artifactId.cdi-plugin-hooks}</artifactId>
              <version>${version.cdi-plugin-hooks}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${version.maven-compiler-plugin}</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
            <showDeprecation>${maven.compiler.showDeprecation}</showDeprecation>
            <showWarnings>${maven.compiler.showWarnings}</showWarnings>
            <debug>true</debug>
            <fork>true</fork>
            <meminitial>${maven.compiler.meminitial}</meminitial>
            <maxmem>${maven.compiler.maxmem}</maxmem>
            <compilerArgument>${maven.compiler.compilerArgument}</compilerArgument>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>${version.maven-source-plugin}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${version.maven-javadoc-plugin}</version>
          <configuration>
            <doclint>${javadoc.doclint}</doclint>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-help-plugin</artifactId>
          <version>${version.maven-help-plugin}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${version.build-helper-maven-plugin}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${version.maven-antrun-plugin}</version>
          <dependencies>
            <dependency>
              <groupId>org.apache.ant</groupId>
              <artifactId>ant</artifactId>
              <version>${version.antrun.ant}</version>
            </dependency>
            <dependency>
              <groupId>ant-contrib</groupId>
              <artifactId>ant-contrib</artifactId>
              <version>${version.antrun.ant-contrib}</version>
              <exclusions>
                <exclusion>
                  <groupId>ant</groupId>
                  <artifactId>ant</artifactId>
                </exclusion>
              </exclusions>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>${version.maven-gpg-plugin}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>${version.maven-release-plugin}</version>
          <configuration>
            <tagNameFormat>@{project.version}</tagNameFormat>
            <useReleaseProfile>false</useReleaseProfile>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>${version.maven-install-plugin}</version>
          <configuration>
            <installAtEnd>true</installAtEnd>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${version.maven-deploy-plugin}</version>
          <configuration>
            <deployAtEnd>true</deployAtEnd>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- Maven enforcer execution -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-toolchains-plugin</artifactId>
        <executions>
          <execution>
            <id>default</id>
            <phase>${toolchain.executionPhase}</phase>
            <goals>
              <goal>toolchain</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <toolchains>
            <jdk>
              <version>${toolchain.jdkVersion}</version>
            </jdk>
          </toolchains>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <configuration>
          <skipSource>${skip.attach-sources}</skipSource>
        </configuration>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <phase>${phase.attach-javadocs}</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>m2e</id>
      <!-- This profile is only active when the property "m2e.version" is set, which is the case when building in
           Eclipse with m2e. -->
      <activation>
        <property>
          <name>osgi.requiredJavaVersion</name>
        </property>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <!-- This plugin's configuration is used to store Eclipse m2e settings only.
                   It has no influence on the Maven build itself. -->
              <groupId>org.eclipse.m2e</groupId>
              <artifactId>lifecycle-mapping</artifactId>
              <version>1.0.0</version>
              <configuration>
                <lifecycleMappingMetadata>
                  <pluginExecutions>
                    <!-- Disable Eclipse error marking for maven-enforcer-plugin -->
                    <pluginExecution>
                      <pluginExecutionFilter>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <versionRange>[1.0,)</versionRange>
                        <goals>
                          <goal>enforce</goal>
                        </goals>
                      </pluginExecutionFilter>
                      <action>
                        <ignore/>
                      </action>
                    </pluginExecution>
                    <pluginExecution>
                      <pluginExecutionFilter>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-plugin-plugin</artifactId>
                        <versionRange>[1.0,)</versionRange>
                        <goals>
                          <goal>descriptor</goal>
                        </goals>
                      </pluginExecutionFilter>
                      <action>
                        <ignore/>
                      </action>
                    </pluginExecution>
                    <pluginExecution>
                      <pluginExecutionFilter>
                        <groupId>org.codehaus.plexus</groupId>
                        <artifactId>plexus-component-metadata</artifactId>
                        <versionRange>[1.0,)</versionRange>
                        <goals>
                          <goal>generate-metadata</goal>
                        </goals>
                      </pluginExecutionFilter>
                      <action>
                        <ignore/>
                      </action>
                    </pluginExecution>
                  </pluginExecutions>
                </lifecycleMappingMetadata>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>
    <profile>
      <id>toolchain</id>
      <!-- Toolchain profile: Activated if SysEnv variable MAVEN_TOOLCHAIN_VERSION is defined. -->
      <activation>
        <property>
          <name>env.MAVEN_TOOLCHAIN_VERSION</name>
        </property>
      </activation>
      <properties>
        <toolchain.executionPhase>${toolchain.executionEnablePhase}</toolchain.executionPhase>
        <toolchain.jdkVersion>${env.MAVEN_TOOLCHAIN_VERSION}</toolchain.jdkVersion>
      </properties>
    </profile>
    <!-- Signing profile: Activated if SysEnv variable OSSRH_GPG_PASSPHRASE is defined. -->
    <!-- Note: This profile requires the following <server> node being defined in settings.xml: -->
    <!-- <servers>
           <server>
             <id>gpg.passphrase</id>
             <passphrase>${env.OSSRH_GPG_PASSPHRASE}</passphrase>
           </server>
         </servers> -->
    <profile>
      <id>signing</id>
      <activation>
        <property>
          <name>env.OSSRH_GPG_PASSPHRASE</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <configuration>
              <skip>${skip.gpg.signing}</skip>
              <!-- since gpg2, pinentry mode has to be set to loopback for unattended passphrase usage -->
              <gpgArguments>
                <arg>--pinentry-mode</arg>
                <arg>loopback</arg>
              </gpgArguments>
            </configuration>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>DO_NOT_RELEASE_SONATYPE_STAGING</id>
      <!-- The order of profiles 'DO_NOT_RELEASE_SONATYPE_STAGING' and 'IS_SNAPSHOT_VERSION' matters! Profile
           'IS_SNAPSHOT_VERSION' must overrule profile 'DO_NOT_RELEASE_SONATYPE_STAGING'! -->
      <activation>
        <property>
          <name>env.DO_NOT_RELEASE_SONATYPE_STAGING</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <staging.autoPublish>false</staging.autoPublish>
        <staging.waitUntil>${staging.waitUntilValidatedState}</staging.waitUntil>
        <staging.dropPhase>${staging.dropPhaseDeploy}</staging.dropPhase>
      </properties>
    </profile>
    <profile>
      <id>IS_SNAPSHOT_VERSION</id>
      <activation>
        <property>
          <name>env.IS_SNAPSHOT_VERSION</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <staging.autoPublish>false</staging.autoPublish>
        <staging.waitUntil>${staging.waitUntilValidatedState}</staging.waitUntil>
        <staging.dropPhase>${staging.dropPhaseNever}</staging.dropPhase>
        <organization.stagingServerId>${organization.snapshotNexusRepoId}</organization.stagingServerId>
      </properties>
    </profile>
    <profile>
      <id>staging</id>
      <activation>
        <property>
          <name>env.OSSRH_USERNAME</name>
        </property>
      </activation>
      <properties>
        <skip.gpg.signing>false</skip.gpg.signing>
      </properties>
      <build>
        <plugins>
          <plugin>
            <!-- We have to explicitly skip maven-deploy-plugin execution, since central-publishing-maven-plugin
                 does NOT disable this in case we define explicit executions for central-publishing-maven-plugin! -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-deploy-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.sonatype.central</groupId>
            <artifactId>central-publishing-maven-plugin</artifactId>
            <version>${version.central-publishing-maven-plugin}</version>
            <extensions>true</extensions>
            <configuration>
              <publishingServerId>${organization.stagingServerId}</publishingServerId>
              <centralBaseUrl>${organization.baseNexusURL}</centralBaseUrl>
              <centralSnapshotsUrl>${organization.snapshotNexusURL}</centralSnapshotsUrl>
              <deploymentName>${project.groupId}:${project.artifactId}:${project.version}</deploymentName>
              <failOnBuildFailure>true</failOnBuildFailure>
              <ignorePublishedComponents>false</ignorePublishedComponents>
              <!-- Maximum amount of seconds to waitUntil a state has been reached. Cannot be less than 1800 seconds. -->
              <waitMaxTime>${staging.progressTimeoutSeconds}</waitMaxTime>
              <waitPollingInterval>${staging.progressPauseDurationSeconds}</waitPollingInterval>
              <!-- The plugin can wait until certain states have been reached.
               This can be useful if it's required to run a deployment async. The following states can be waited for:
                 published, uploaded, validated -->
              <waitUntil>${staging.waitUntil}</waitUntil>
              <autoPublish>${staging.autoPublish}</autoPublish>
              <checksums>all</checksums>
            </configuration>
            <executions>
              <!-- Note: We have to define the default-publish explicitly here, since there might be other optional
              executions in future. This is required, since central-publishing-maven-plugin does not perform
              the default-publish, if there is an explicit execution defined! -->
              <execution>
                <id>default-publish</id>
                <phase>${staging.publishPhase}</phase>
                <goals>
                  <goal>publish</goal>
                </goals>
              </execution>
              <!-- With central-publishing-maven-plugin there is no dropping anymore. -->
              <!-- Validated but not published deployments will be removed after 90 days. -->
              <!-- <execution>-->
              <!--   <id>STAGING_EXPLICIT_DROP_AFTER_DEPLOY</id>-->
              <!--   <phase>${staging.dropPhase}</phase>-->
              <!--   <goals>-->
              <!--     <goal>drop</goal>-->
              <!--   </goals>-->
              <!-- </execution>-->
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
